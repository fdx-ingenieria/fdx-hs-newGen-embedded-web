{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6cd063fc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Jose\\Documents\\projects\\fdx-hs-newGen-embedded-web\\fdx-hs-newGen-embedded-web\\fdx-hs-cm2-web\\src\\views\\sensor_configView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\" >\r\n\r\n\r\n   \r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport { useWebSocketStore } from '@/store/websocket.js';\r\nimport { defineComponent, ref, watch } from 'vue';\r\n\r\nexport default {\r\n  name: 'labelMenu',\r\n  data() {\r\n    return {\r\n      saved: false,\r\n      sensor_configl : { \"cmd\": \"sensor_configl\",\"arg\":\"get_all\",\"data\":\"\"},\r\n      messageReceived: null,\r\n      labels:{\r\n      device: '', // User input for device\r\n      equipment: ['', '', '', ''], // User input for equipment\r\n      location: [\r\n        '', // User input for location_0\r\n        '', // User input for location_1\r\n        '', // User input for location_2\r\n        '', // User input for location_3\r\n        '', // User input for location_4\r\n        '', // User input for location_5\r\n        '', // User input for location_6\r\n      ],\r\n      position: [\r\n        '', // User input for phase_0\r\n        '', // User input for phase_1\r\n        '', // User input for phase_2\r\n        '', // User input for neutral_3\r\n        '', // User input for ambient\r\n      ],\r\n    }\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      const websocketStore = useWebSocketStore();\r\n        const message = { \"cmd\": \"sensor_configl\",\"arg\":\"get_all\",\"data\":\"\"} ; // Replace with your message data\r\n        websocketStore.send(message);\r\n\r\n      },\r\n    save() {\r\n      const websocketStore = useWebSocketStore();\r\n      const message = { cmd: 'label',arg: \"set\", data: this.labels }; // Replace with your message data\r\n      websocketStore.send(message);\r\n      this.saved=true;\r\n     \r\n    },\r\n    sendCMD(message) {\r\n      const websocketStore = useWebSocketStore();\r\n      //const message = { cmd: 'label',arg: \"set\", data: this.labels }; // Replace with your message data\r\n      websocketStore.send(message);\r\n      this.saved=true;\r\n     \r\n    },\r\n\r\n    loadWhenConnected(){\r\n\r\n    const websocketStore = useWebSocketStore();\r\n    this.status=websocketStore.getStatus();\r\n    console.log(\"status: \"+ this.status);\r\n\r\n    if(this.status==\"connected\"){\r\n      this.sendCMD(this.sensor_configl);\r\n\r\n\r\n\r\n\r\n      this.sendMessage();\r\n      clearInterval(this.timer)\r\n      }\r\n\r\n    },\r\n\r\n    deepEqual(obj1, obj2) {\r\n      if (obj1 === obj2) {\r\n        return true;\r\n      }\r\n\r\n      if (typeof obj1 !== 'object' || obj1 === null || typeof obj2 !== 'object' || obj2 === null) {\r\n        return false;\r\n      }\r\n\r\n      const keys1 = Object.keys(obj1);\r\n      const keys2 = Object.keys(obj2);\r\n\r\n      if (keys1.length !== keys2.length) {\r\n        return false;\r\n      }\r\n\r\n      for (const key of keys1) {\r\n        if (!keys2.includes(key) || !this.deepEqual(obj1[key], obj2[key])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n  },\r\n\r\n  created() {\r\n\r\n    this.timer = setInterval(this.loadWhenConnected, 1000)\r\n    const websocketStore = useWebSocketStore();\r\n\r\n    this.$watch(\r\n      () => websocketStore.messageReceived,\r\n      (newMessage) => {\r\n     // console.log(newMessage);\r\n      try{\r\n        if(this.saved){\r\n          this.saved=false;\r\n          var tmp=this.labels;\r\n          if(this.deepEqual(tmp,newMessage)){\r\n\r\n            this.labels=newMessage;\r\n            alert(\"saved OK\")\r\n\r\n\r\n          }else{\r\n          alert(\"saved Fail\")\r\n\r\n          }\r\n        }else{\r\n          this.labels=newMessage.data;\r\n\r\n        }\r\n      }\r\n     catch (error) {\r\n        console.error(error);\r\n        // Expected output: ReferenceError: nonExistentFunction is not defined\r\n        // (Note: the exact output may be browser-dependent)\r\n      }\r\n      }\r\n    );\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ninput {\r\n  margin: 5px;\r\n}\r\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAW;;uBAAtBC,mBAAA,CAIM,OAJNC,UAIM"},"metadata":{},"sourceType":"module","externalDependencies":[]}